input {
  tcp {
    port => 5000
    codec => json_lines
  }
}

filter {
  if [service] == "nginx" {
    json {
      source => "log" 
      target => "nginx_raw"
    }

    ruby {
      code => "
        raw = event.get('nginx_raw')
        if raw.is_a?(Hash)
          raw.each { |k, v| event.set(k, v) unless k == 'service' }
        end
      "
    }

    useragent {
      source => "user_agent"
      target => "user_agent_parsed"
    }

  ruby {
    code => "
      referer = event.get('http_referer')
      if referer.is_a?(String)
        uri = URI.parse(referer) rescue nil
        if uri && uri.path
          parts = uri.path.split('/')
          service = parts.find { |p| !p.empty? }
          event.set('referer_service', service) if service
        end
      end
      "
    }

    ruby {
      code => "
        ua = event.get('user_agent_parsed') || {}

        def invalid?(val)
          val.nil? || val.strip.empty? || val == '-'
        end

        if invalid?(event.get('sec_ch_ua_platform')) && ua['os']
          event.set('sec_ch_ua_platform', ua['os'])
        end

        if invalid?(event.get('sec_ch_ua_mobile'))
          device = ua['device'] || ''
          ua_string = event.get('user_agent') || ''
          is_mobile = (
            device.downcase.include?('mobile') ||
            device.downcase.include?('iphone') ||
            device.downcase.include?('android') ||
            ua_string.downcase.include?('mobile') ||
            ua_string.downcase.include?('android') ||
            ua_string.downcase.include?('iphone')
          )
          event.set('sec_ch_ua_mobile', is_mobile ? '?1' : '?0')
        end
      "
    }

    mutate {
      convert => {
        "msec" => "float"
        "remote_port" => "integer"
        "status" => "integer"
        "body_bytes_sent" => "integer"
        "bytes_sent" => "integer"
        "request_time" => "float"
        "upstream_response_time" => "float"
        "upstream_connect_time" => "float"
        "upstream_header_time" => "float"
        "server_port" => "integer"
        "connection" => "integer"
      }
    }

    date {
      match => ["timestamp", "ISO8601"]
      target => "@timestamp"
      remove_field => ["timestamp"]
    }

    mutate {
      remove_field => ["nginx_raw", "log"]
    }
  }

  if ![service] {
    mutate {
      add_field => { "service" => "unknown" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    user => "elastic"
    password => "${ELASTIC_PASSWORD}"
    index => "%{service}-%{+YYYY.MM.dd}"
    ilm_enabled => false
  }
}
